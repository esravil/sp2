/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SP2_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const TAKE_OFFER_DISCRIMINATOR = new Uint8Array([
  128, 156, 242, 207, 237, 192, 103, 240,
]);

export function getTakeOfferDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(TAKE_OFFER_DISCRIMINATOR);
}

export type TakeOfferInstruction<
  TProgram extends string = typeof SP2_PROGRAM_ADDRESS,
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountTaker extends string | AccountMeta<string> = string,
  TAccountMaker extends string | AccountMeta<string> = string,
  TAccountMintAddressA extends string | AccountMeta<string> = string,
  TAccountMintAddressB extends string | AccountMeta<string> = string,
  TAccountTakerTokenAccountA extends string | AccountMeta<string> = string,
  TAccountTakerTokenAccountB extends string | AccountMeta<string> = string,
  TAccountMakerTokenAccountB extends string | AccountMeta<string> = string,
  TAccountOffer extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTaker extends string
        ? WritableSignerAccount<TAccountTaker> &
            AccountSignerMeta<TAccountTaker>
        : TAccountTaker,
      TAccountMaker extends string
        ? WritableAccount<TAccountMaker>
        : TAccountMaker,
      TAccountMintAddressA extends string
        ? ReadonlyAccount<TAccountMintAddressA>
        : TAccountMintAddressA,
      TAccountMintAddressB extends string
        ? ReadonlyAccount<TAccountMintAddressB>
        : TAccountMintAddressB,
      TAccountTakerTokenAccountA extends string
        ? WritableAccount<TAccountTakerTokenAccountA>
        : TAccountTakerTokenAccountA,
      TAccountTakerTokenAccountB extends string
        ? WritableAccount<TAccountTakerTokenAccountB>
        : TAccountTakerTokenAccountB,
      TAccountMakerTokenAccountB extends string
        ? WritableAccount<TAccountMakerTokenAccountB>
        : TAccountMakerTokenAccountB,
      TAccountOffer extends string
        ? WritableAccount<TAccountOffer>
        : TAccountOffer,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      ...TRemainingAccounts,
    ]
  >;

export type TakeOfferInstructionData = { discriminator: ReadonlyUint8Array };

export type TakeOfferInstructionDataArgs = {};

export function getTakeOfferInstructionDataEncoder(): FixedSizeEncoder<TakeOfferInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: TAKE_OFFER_DISCRIMINATOR })
  );
}

export function getTakeOfferInstructionDataDecoder(): FixedSizeDecoder<TakeOfferInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getTakeOfferInstructionDataCodec(): FixedSizeCodec<
  TakeOfferInstructionDataArgs,
  TakeOfferInstructionData
> {
  return combineCodec(
    getTakeOfferInstructionDataEncoder(),
    getTakeOfferInstructionDataDecoder()
  );
}

export type TakeOfferAsyncInput<
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTaker extends string = string,
  TAccountMaker extends string = string,
  TAccountMintAddressA extends string = string,
  TAccountMintAddressB extends string = string,
  TAccountTakerTokenAccountA extends string = string,
  TAccountTakerTokenAccountB extends string = string,
  TAccountMakerTokenAccountB extends string = string,
  TAccountOffer extends string = string,
  TAccountVault extends string = string,
> = {
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  taker: TransactionSigner<TAccountTaker>;
  maker: Address<TAccountMaker>;
  mintAddressA: Address<TAccountMintAddressA>;
  mintAddressB: Address<TAccountMintAddressB>;
  takerTokenAccountA?: Address<TAccountTakerTokenAccountA>;
  takerTokenAccountB?: Address<TAccountTakerTokenAccountB>;
  makerTokenAccountB?: Address<TAccountMakerTokenAccountB>;
  offer: Address<TAccountOffer>;
  vault?: Address<TAccountVault>;
};

export async function getTakeOfferInstructionAsync<
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountTaker extends string,
  TAccountMaker extends string,
  TAccountMintAddressA extends string,
  TAccountMintAddressB extends string,
  TAccountTakerTokenAccountA extends string,
  TAccountTakerTokenAccountB extends string,
  TAccountMakerTokenAccountB extends string,
  TAccountOffer extends string,
  TAccountVault extends string,
  TProgramAddress extends Address = typeof SP2_PROGRAM_ADDRESS,
>(
  input: TakeOfferAsyncInput<
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountTaker,
    TAccountMaker,
    TAccountMintAddressA,
    TAccountMintAddressB,
    TAccountTakerTokenAccountA,
    TAccountTakerTokenAccountB,
    TAccountMakerTokenAccountB,
    TAccountOffer,
    TAccountVault
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  TakeOfferInstruction<
    TProgramAddress,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountTaker,
    TAccountMaker,
    TAccountMintAddressA,
    TAccountMintAddressB,
    TAccountTakerTokenAccountA,
    TAccountTakerTokenAccountB,
    TAccountMakerTokenAccountB,
    TAccountOffer,
    TAccountVault
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? SP2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    taker: { value: input.taker ?? null, isWritable: true },
    maker: { value: input.maker ?? null, isWritable: true },
    mintAddressA: { value: input.mintAddressA ?? null, isWritable: false },
    mintAddressB: { value: input.mintAddressB ?? null, isWritable: false },
    takerTokenAccountA: {
      value: input.takerTokenAccountA ?? null,
      isWritable: true,
    },
    takerTokenAccountB: {
      value: input.takerTokenAccountB ?? null,
      isWritable: true,
    },
    makerTokenAccountB: {
      value: input.makerTokenAccountB ?? null,
      isWritable: true,
    },
    offer: { value: input.offer ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.takerTokenAccountA.value) {
    accounts.takerTokenAccountA.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.taker.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintAddressA.value)),
      ],
    });
  }
  if (!accounts.takerTokenAccountB.value) {
    accounts.takerTokenAccountB.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.taker.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintAddressB.value)),
      ],
    });
  }
  if (!accounts.makerTokenAccountB.value) {
    accounts.makerTokenAccountB.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.maker.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintAddressB.value)),
      ],
    });
  }
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.offer.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintAddressA.value)),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.taker),
      getAccountMeta(accounts.maker),
      getAccountMeta(accounts.mintAddressA),
      getAccountMeta(accounts.mintAddressB),
      getAccountMeta(accounts.takerTokenAccountA),
      getAccountMeta(accounts.takerTokenAccountB),
      getAccountMeta(accounts.makerTokenAccountB),
      getAccountMeta(accounts.offer),
      getAccountMeta(accounts.vault),
    ],
    data: getTakeOfferInstructionDataEncoder().encode({}),
    programAddress,
  } as TakeOfferInstruction<
    TProgramAddress,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountTaker,
    TAccountMaker,
    TAccountMintAddressA,
    TAccountMintAddressB,
    TAccountTakerTokenAccountA,
    TAccountTakerTokenAccountB,
    TAccountMakerTokenAccountB,
    TAccountOffer,
    TAccountVault
  >);
}

export type TakeOfferInput<
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTaker extends string = string,
  TAccountMaker extends string = string,
  TAccountMintAddressA extends string = string,
  TAccountMintAddressB extends string = string,
  TAccountTakerTokenAccountA extends string = string,
  TAccountTakerTokenAccountB extends string = string,
  TAccountMakerTokenAccountB extends string = string,
  TAccountOffer extends string = string,
  TAccountVault extends string = string,
> = {
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  taker: TransactionSigner<TAccountTaker>;
  maker: Address<TAccountMaker>;
  mintAddressA: Address<TAccountMintAddressA>;
  mintAddressB: Address<TAccountMintAddressB>;
  takerTokenAccountA: Address<TAccountTakerTokenAccountA>;
  takerTokenAccountB: Address<TAccountTakerTokenAccountB>;
  makerTokenAccountB: Address<TAccountMakerTokenAccountB>;
  offer: Address<TAccountOffer>;
  vault: Address<TAccountVault>;
};

export function getTakeOfferInstruction<
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountTaker extends string,
  TAccountMaker extends string,
  TAccountMintAddressA extends string,
  TAccountMintAddressB extends string,
  TAccountTakerTokenAccountA extends string,
  TAccountTakerTokenAccountB extends string,
  TAccountMakerTokenAccountB extends string,
  TAccountOffer extends string,
  TAccountVault extends string,
  TProgramAddress extends Address = typeof SP2_PROGRAM_ADDRESS,
>(
  input: TakeOfferInput<
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountTaker,
    TAccountMaker,
    TAccountMintAddressA,
    TAccountMintAddressB,
    TAccountTakerTokenAccountA,
    TAccountTakerTokenAccountB,
    TAccountMakerTokenAccountB,
    TAccountOffer,
    TAccountVault
  >,
  config?: { programAddress?: TProgramAddress }
): TakeOfferInstruction<
  TProgramAddress,
  TAccountAssociatedTokenProgram,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountTaker,
  TAccountMaker,
  TAccountMintAddressA,
  TAccountMintAddressB,
  TAccountTakerTokenAccountA,
  TAccountTakerTokenAccountB,
  TAccountMakerTokenAccountB,
  TAccountOffer,
  TAccountVault
> {
  // Program address.
  const programAddress = config?.programAddress ?? SP2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    taker: { value: input.taker ?? null, isWritable: true },
    maker: { value: input.maker ?? null, isWritable: true },
    mintAddressA: { value: input.mintAddressA ?? null, isWritable: false },
    mintAddressB: { value: input.mintAddressB ?? null, isWritable: false },
    takerTokenAccountA: {
      value: input.takerTokenAccountA ?? null,
      isWritable: true,
    },
    takerTokenAccountB: {
      value: input.takerTokenAccountB ?? null,
      isWritable: true,
    },
    makerTokenAccountB: {
      value: input.makerTokenAccountB ?? null,
      isWritable: true,
    },
    offer: { value: input.offer ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.taker),
      getAccountMeta(accounts.maker),
      getAccountMeta(accounts.mintAddressA),
      getAccountMeta(accounts.mintAddressB),
      getAccountMeta(accounts.takerTokenAccountA),
      getAccountMeta(accounts.takerTokenAccountB),
      getAccountMeta(accounts.makerTokenAccountB),
      getAccountMeta(accounts.offer),
      getAccountMeta(accounts.vault),
    ],
    data: getTakeOfferInstructionDataEncoder().encode({}),
    programAddress,
  } as TakeOfferInstruction<
    TProgramAddress,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountTaker,
    TAccountMaker,
    TAccountMintAddressA,
    TAccountMintAddressB,
    TAccountTakerTokenAccountA,
    TAccountTakerTokenAccountB,
    TAccountMakerTokenAccountB,
    TAccountOffer,
    TAccountVault
  >);
}

export type ParsedTakeOfferInstruction<
  TProgram extends string = typeof SP2_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    associatedTokenProgram: TAccountMetas[0];
    tokenProgram: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
    taker: TAccountMetas[3];
    maker: TAccountMetas[4];
    mintAddressA: TAccountMetas[5];
    mintAddressB: TAccountMetas[6];
    takerTokenAccountA: TAccountMetas[7];
    takerTokenAccountB: TAccountMetas[8];
    makerTokenAccountB: TAccountMetas[9];
    offer: TAccountMetas[10];
    vault: TAccountMetas[11];
  };
  data: TakeOfferInstructionData;
};

export function parseTakeOfferInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedTakeOfferInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      associatedTokenProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      taker: getNextAccount(),
      maker: getNextAccount(),
      mintAddressA: getNextAccount(),
      mintAddressB: getNextAccount(),
      takerTokenAccountA: getNextAccount(),
      takerTokenAccountB: getNextAccount(),
      makerTokenAccountB: getNextAccount(),
      offer: getNextAccount(),
      vault: getNextAccount(),
    },
    data: getTakeOfferInstructionDataDecoder().decode(instruction.data),
  };
}
