/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedInitializeInstruction,
  type ParsedMakeOfferInstruction,
  type ParsedRefundOfferInstruction,
  type ParsedTakeOfferInstruction,
} from '../instructions';

export const SP2_PROGRAM_ADDRESS =
  '8SfHhHnLEUz4x4BqMWv1994qGHCcMd6afMUd5Y7EtyfL' as Address<'8SfHhHnLEUz4x4BqMWv1994qGHCcMd6afMUd5Y7EtyfL'>;

export enum Sp2Account {
  Offer,
}

export function identifySp2Account(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): Sp2Account {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([215, 88, 60, 71, 170, 162, 73, 229])
      ),
      0
    )
  ) {
    return Sp2Account.Offer;
  }
  throw new Error(
    'The provided account could not be identified as a sp2 account.'
  );
}

export enum Sp2Instruction {
  Initialize,
  MakeOffer,
  RefundOffer,
  TakeOffer,
}

export function identifySp2Instruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): Sp2Instruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return Sp2Instruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([214, 98, 97, 35, 59, 12, 44, 178])
      ),
      0
    )
  ) {
    return Sp2Instruction.MakeOffer;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([171, 18, 70, 32, 244, 121, 60, 75])
      ),
      0
    )
  ) {
    return Sp2Instruction.RefundOffer;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([128, 156, 242, 207, 237, 192, 103, 240])
      ),
      0
    )
  ) {
    return Sp2Instruction.TakeOffer;
  }
  throw new Error(
    'The provided instruction could not be identified as a sp2 instruction.'
  );
}

export type ParsedSp2Instruction<
  TProgram extends string = '8SfHhHnLEUz4x4BqMWv1994qGHCcMd6afMUd5Y7EtyfL',
> =
  | ({
      instructionType: Sp2Instruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: Sp2Instruction.MakeOffer;
    } & ParsedMakeOfferInstruction<TProgram>)
  | ({
      instructionType: Sp2Instruction.RefundOffer;
    } & ParsedRefundOfferInstruction<TProgram>)
  | ({
      instructionType: Sp2Instruction.TakeOffer;
    } & ParsedTakeOfferInstruction<TProgram>);
